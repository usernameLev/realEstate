//Подключение шрифта
@mixin font($font_name, $file_name, $weight, $style) {
  @font-face {
    font-family: $font_name;
    font-display: swap;
    src: url('../fonts/#{$file_name}.woff2') format('woff2'),
      url('../fonts/#{$file_name}.woff') format('woff');
    font-weight: #{$weight};
    font-style: #{$style};
  }
}
//Percent
@function prc($px, $from) {
  $result: math.div($px, $from) * 100%;
  @return $result;
}
//REM
@function rem($px) {
  $result: math.div($px, 16) + rem;
  @return $result;
}
//EM
@function em($px, $current: 16) {
  $result: math.div($px, $current) + em;
  @return $result;
}
//Адаптивное свойство

//Currency
@mixin currency($sym) {
  &::after {
    content: '#{$sym}';
  }
}

// Grids
@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
  display: grid;
  gap: $gap;
  grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}

// Адаптивный размер
// padding: calc(10px + (30 - 10) * (100vw - 320px) / (1620 - 320));
@mixin adaptiveValue($property, $maxSize, $minSize, $type) {
  @if $type == 1 {
    // Больше контейнера не увеличивается, т.е за ширину контейнера не будет увеличиваться значение, будет максимально заданное значение
    $addSize: $maxSize - $minSize;
    #{$property}: $maxSize + px;

    @media (max-width: ($maxWidth + px)) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
      );
    }
  } @else if $type == 2 {
    $addSize: $maxSize - $minSize;

    // Увеличивается и уменьшается от заданного контейнера
    #{$property}: calc(
      #{$minSize +
        px} +
        #{$addSize} *
        ((100vw - #{$minWidth + px}) / #{$maxWidth - $minWidth})
    );
  }
}
